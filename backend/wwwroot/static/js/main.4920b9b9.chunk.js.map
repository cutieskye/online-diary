{"version":3,"sources":["components/$buttons/PrimaryButton/PrimaryButton.tsx","config.ts","helpers/auth/loginUser.ts","mocks/mockAuth.ts","hooks/useAppDispatch.ts","store/user/slice.ts","components/Container/Container.tsx","components/Footer/Footer.tsx","static/LargeLogo.png","components/PageTemplateUnauth/PageTemplateUnauth.tsx","components/$auth/LoginPage/LoginPage.tsx","helpers/auth/registerUser.ts","components/$auth/RegistrationPage/RegistrationPage.tsx","helpers/dateToString.ts","helpers/getNextDate.ts","helpers/getPrevDate.ts","hooks/useAppSelector.ts","store/note/selectors/index.ts","store/user/selectors/index.ts","helpers/getToken.ts","store/note/thunks/deleteNote.ts","helpers/isEditable.ts","store/note/thunks/fetchNote.ts","store/note/thunks/postNote.ts","store/note/thunks/putNote.ts","store/note/slice.ts","components/Loader/Loader.tsx","components/$buttons/RedButton/RedButton.tsx","components/Header/Header.tsx","components/PageTemplate/PageTemplate.tsx","components/$buttons/SecondaryButton/SecondaryButton.tsx","components/$note/ShowNote/ShowNote.tsx","components/$note/WriteNote/WriteNote.tsx","components/$note/Note/Note.tsx","helpers/isValidToken.ts","store/user/selectors/selectIsAuth.ts","components/NotesCalendar/NotesCalendar.tsx","components/App/App.tsx","store/store.ts","serviceWorker.ts","index.tsx"],"names":["PrimaryButton","value","className","isDisabled","onClick","type","classNames","disabled","BASE_API_URL","loginUser","Date","setHours","getHours","toString","user","a","url","fetch","method","headers","body","JSON","stringify","res","status","Error","ok","statusText","json","data","useAppDispatch","useDispatch","initialState","userName","localStorage","getItem","auth","token","expiration","userSlice","createSlice","name","reducers","setUsername","state","action","payload","setAuth","logout","undefined","removeItem","toast","warn","actions","Container","children","Footer","PageTemplateUnauth","src","logo","alt","LoginPage","dispatch","useForm","register","handleSubmit","setError","errors","formState","useState","setIsDisabled","submitLogin","credentials","message","onSubmit","required","placeholder","password","to","registerUser","RegistrationPage","criteriaMode","submitRegistration","validate","minLen","length","hasLowerCaseLetter","toUpperCase","hasUpperCaseLetter","toLowerCase","hasDigit","test","hasNonAlphanumericSymbol","render","messages","Object","entries","map","dateToString","date","year","getFullYear","month","getMonth","day","getDate","getNextDate","currentDate","getTime","getPrevDate","useAppSelector","useSelector","selectNote","note","selectExpiration","getToken","store","deleteNote","createAsyncThunk","fetchDate","thunkAPI","getState","Authorization","dayDurationMs","today","setUTCHours","isEditable","initialDate","Math","abs","isYesterdayOrTomorrow","isToday","fetchNote","postNote","putNote","heading","content","modificationDate","noteSlice","setNote","setStatus","extraReducers","builder","addCase","rejected","fulfilled","success","addMatcher","isAnyOf","pending","error","Loader","RedButton","Header","navigate","useNavigate","PageTemplate","SecondaryButton","ShowNote","useParams","dateObj","canEdit","WriteNote","_note","defaultValue","maxLength","Note","useLayoutEffect","prevDate","path","navigateToPrev","nextDate","navigateToNext","isValidToken","expirationDate","now","selectIsAuth","Boolean","NotesCalendar","onClickDay","App","isAuth","location","useLocation","useEffect","element","replace","configureStore","reducer","userReducer","noteReducer","subscribe","username","setItem","window","hostname","match","ReactDOM","StrictMode","autoClose","limit","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.4920b9b9.chunk.js","sourcesContent":["import classNames from 'classnames';\r\nimport React from 'react';\r\nimport { IButton } from '../../../types/IButton';\r\n\r\nconst PrimaryButton = ({ value, className, isDisabled, onClick }: IButton) => {\r\n  return (\r\n    <input\r\n      type=\"submit\"\r\n      className={classNames('primaryButton', className)}\r\n      value={value}\r\n      disabled={isDisabled}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrimaryButton;\r\n","export const BASE_API_URL = 'https://localhost:6969/api';\r\n\r\nexport const isDev = process.env.NODE_ENV === 'development';\r\n\r\nexport const entryMocked = isDev;\r\nexport const userMocked = isDev;\r\n","import { BASE_API_URL, userMocked } from '../../config';\r\nimport mockAuth from '../../mocks/mockAuth';\r\nimport { IAuth } from '../../types/IAuth';\r\nimport { ICredentials } from '../../types/ICredentials';\r\nimport returnDataWithDelay from '../returnDataWithDelay';\r\n\r\nconst loginUser = async (user: ICredentials) => {\r\n  if (userMocked) {\r\n    return returnDataWithDelay(mockAuth, 'fast 3G');\r\n  }\r\n\r\n  const url = `${BASE_API_URL}/login/`;\r\n\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(user),\r\n  });\r\n\r\n  const incorrectPassword = 401;\r\n  if (res.status === incorrectPassword) {\r\n    throw new Error('Username and password do not match');\r\n  }\r\n  if (!res.ok) throw new Error(res.statusText);\r\n\r\n  const data = await res.json();\r\n  return data as IAuth;\r\n};\r\n\r\nexport default loginUser;\r\n","import { IAuth } from '../types/IAuth';\r\n\r\nconst mockAuth: IAuth = {\r\n  token: 'mockToken',\r\n  expiration: new Date(\r\n    new Date().setHours(new Date().getHours() + 1),\r\n  ).toString(),\r\n};\r\n\r\nexport default mockAuth;\r\n","import { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from '../store/store';\r\n\r\nconst useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\r\nexport default useAppDispatch;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { toast } from 'react-toastify';\r\nimport { IAuth } from '../../types/IAuth';\r\nimport { IUser } from '../../types/IUser';\r\n\r\nexport const initialState: IUser = {\r\n  userName: localStorage.getItem('USERNAME'),\r\n  auth: {\r\n    token: localStorage.getItem('TOKEN'),\r\n    expiration: localStorage.getItem('EXPIRATION'),\r\n  },\r\n};\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    setUsername: (state, action: PayloadAction<string>) => {\r\n      state.userName = action.payload;\r\n    },\r\n    setAuth: (state, action: PayloadAction<IAuth>) => {\r\n      state.auth = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.auth.token = null;\r\n      state.auth.expiration = undefined;\r\n      state.userName = undefined;\r\n      localStorage.removeItem('USERNAME');\r\n      localStorage.removeItem('TOKEN');\r\n      localStorage.removeItem('EXPIRATION');\r\n      toast.warn('Logged out');\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUsername, setAuth, logout } = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n","import classNames from 'classnames';\r\nimport React from 'react';\r\n\r\nimport './Container.css';\r\n\r\ninterface IProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst Container = ({ children, className }: IProps) => {\r\n  return <div className={classNames('container', className)}>{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react';\r\n\r\nimport './Footer.css';\r\nimport Container from '../Container/Container';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <Container className=\"flex justify-between align-center\">\r\n        <p>© Web Application Programming, 2021-2022</p>\r\n        <p>Bohdan Soproniuk & Akmalkhon Mukhiddinov</p>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/LargeLogo.e6a559ef.png\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Footer from '../Footer/Footer';\r\nimport logo from '../../static/LargeLogo.png';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst PageTemplateUnauth = ({ children, className }: Props) => {\r\n  return (\r\n    <section className=\"page\">\r\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n      <main className={classNames('page__content', className)}>{children}</main>\r\n      <Footer />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PageTemplateUnauth;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Link } from 'react-router-dom';\r\nimport PrimaryButton from '../../$buttons/PrimaryButton/PrimaryButton';\r\nimport loginUser from '../../../helpers/auth/loginUser';\r\nimport useAppDispatch from '../../../hooks/useAppDispatch';\r\nimport { setAuth, setUsername } from '../../../store/user/slice';\r\nimport { IAuth } from '../../../types/IAuth';\r\nimport { ICredentials } from '../../../types/ICredentials';\r\nimport Container from '../../Container/Container';\r\n\r\nimport './LoginPage.css';\r\nimport PageTemplateUnauth from '../../PageTemplateUnauth/PageTemplateUnauth';\r\n\r\nconst LoginPage = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  const submitLogin = async (credentials: ICredentials) => {\r\n    setIsDisabled(true);\r\n    try {\r\n      const auth = await loginUser(credentials);\r\n      dispatch(setUsername(credentials.userName));\r\n      dispatch(setAuth(auth as IAuth));\r\n    } catch (error) {\r\n      setError('password', {\r\n        type: 'incorrectPassword',\r\n        message: error.message,\r\n      });\r\n    } finally {\r\n      setIsDisabled(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageTemplateUnauth>\r\n      <Container>\r\n        <form onSubmit={handleSubmit(submitLogin)} className=\"authForm\">\r\n          <input\r\n            {...register('userName', { required: true })}\r\n            type=\"text\"\r\n            className=\"authInput\"\r\n            placeholder=\"Username\"\r\n          />\r\n          <input\r\n            {...register('password', { required: true })}\r\n            type=\"password\"\r\n            className=\"authInput\"\r\n            placeholder=\"Password\"\r\n          />\r\n          {errors.password && (\r\n            <p className=\"errorMessage\">{errors.password.message}</p>\r\n          )}\r\n          <PrimaryButton\r\n            value=\"Log In\"\r\n            className=\"authButton\"\r\n            isDisabled={isDisabled}\r\n          />\r\n        </form>\r\n        <div className=\"authSubform\">\r\n          <p>\r\n            Don&apos;t have an account?&nbsp;\r\n            <Link to=\"/registration\">Sign Up</Link>\r\n          </p>\r\n        </div>\r\n      </Container>\r\n    </PageTemplateUnauth>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import { BASE_API_URL, userMocked } from '../../config';\r\nimport mockAuth from '../../mocks/mockAuth';\r\nimport { IAuth } from '../../types/IAuth';\r\nimport { ICredentials } from '../../types/ICredentials';\r\nimport returnDataWithDelay from '../returnDataWithDelay';\r\n\r\nconst registerUser = async (credentials: ICredentials) => {\r\n  if (userMocked) {\r\n    return returnDataWithDelay(mockAuth, 'fast 3G');\r\n  }\r\n\r\n  const url = `${BASE_API_URL}/register/`;\r\n\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n\r\n  const unavailableUserName = 409;\r\n  if (res.status === unavailableUserName) {\r\n    throw new Error('Username already exists');\r\n  }\r\n  if (!res.ok) throw new Error(res.statusText);\r\n\r\n  const data = await res.json();\r\n  return data as IAuth;\r\n};\r\n\r\nexport default registerUser;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Link } from 'react-router-dom';\r\nimport { ErrorMessage } from '@hookform/error-message';\r\nimport PrimaryButton from '../../$buttons/PrimaryButton/PrimaryButton';\r\nimport registerUser from '../../../helpers/auth/registerUser';\r\nimport useAppDispatch from '../../../hooks/useAppDispatch';\r\nimport { setAuth, setUsername } from '../../../store/user/slice';\r\nimport { IAuth } from '../../../types/IAuth';\r\nimport { ICredentials } from '../../../types/ICredentials';\r\nimport Container from '../../Container/Container';\r\nimport PageTemplateUnauth from '../../PageTemplateUnauth/PageTemplateUnauth';\r\n\r\nimport './RegistrationPage.css';\r\n\r\nconst RegistrationPage = () => {\r\n  const dispatch = useAppDispatch();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setError,\r\n  } = useForm({ criteriaMode: 'all' });\r\n\r\n  const [isDisabled, setIsDisabled] = useState(false);\r\n  const submitRegistration = async (credentials: ICredentials) => {\r\n    setIsDisabled(true);\r\n    try {\r\n      const auth = await registerUser(credentials);\r\n      dispatch(setUsername(credentials.userName));\r\n      dispatch(setAuth(auth as IAuth));\r\n    } catch (error) {\r\n      setError('userName', {\r\n        type: 'unavailableUsername',\r\n        message: error.message,\r\n      });\r\n    } finally {\r\n      setIsDisabled(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageTemplateUnauth>\r\n      <Container>\r\n        <form onSubmit={handleSubmit(submitRegistration)} className=\"authForm\">\r\n          <input\r\n            {...register('userName', { required: true })}\r\n            type=\"text\"\r\n            className=\"authInput\"\r\n            placeholder=\"Username\"\r\n          />\r\n          {errors.userName && (\r\n            <p className=\"errorMessage\">{errors.userName.message}</p>\r\n          )}\r\n          <input\r\n            {...register('password', {\r\n              required: 'Password cannot be empty',\r\n              validate: {\r\n                minLen: (password: string) =>\r\n                  password.length >= 6 ||\r\n                  'Password must be at least 6 characters',\r\n                hasLowerCaseLetter: (password: string) =>\r\n                  password.toUpperCase() !== password ||\r\n                  'Password must have at least one lowercase letter',\r\n                hasUpperCaseLetter: (password: string) =>\r\n                  password.toLowerCase() !== password ||\r\n                  'Password must have at least one uppercase letter',\r\n                hasDigit: (password: string) =>\r\n                  /\\d/.test(password) ||\r\n                  'Password must have at least one digit',\r\n                hasNonAlphanumericSymbol: (password: string) =>\r\n                  /[^a-zA-Z0-9]/.test(password) ||\r\n                  'Password must have at least one non-alphanumeric symbol',\r\n              },\r\n            })}\r\n            type=\"password\"\r\n            className=\"authInput\"\r\n            placeholder=\"Password\"\r\n          />\r\n          <ErrorMessage\r\n            errors={errors}\r\n            name=\"password\"\r\n            render={({ messages }) =>\r\n              messages &&\r\n              Object.entries(messages).map(([type, message]) => (\r\n                <p key={type} className=\"errorMessage\">\r\n                  {message}\r\n                </p>\r\n              ))\r\n            }\r\n          />\r\n          <PrimaryButton\r\n            value=\"Sign Up\"\r\n            className=\"authButton\"\r\n            isDisabled={isDisabled}\r\n          />\r\n        </form>\r\n        <div className=\"authSubform\">\r\n          <p>\r\n            Have an account?&nbsp;\r\n            <Link to=\"/\">Log In</Link>\r\n          </p>\r\n        </div>\r\n      </Container>\r\n    </PageTemplateUnauth>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n","// Convert Date object to string 'yyyy-mm-dd'\r\nconst dateToString = (date: Date): string => {\r\n  const year = date.getFullYear().toString();\r\n  let month = (date.getMonth() + 1).toString();\r\n  let day = date.getDate().toString();\r\n\r\n  if (month.length < 2) month = `0${month}`;\r\n  if (day.length < 2) day = `0${day}`;\r\n\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nexport default dateToString;\r\n","const getNextDate = (currentDate: Date): Date => {\n  return new Date(currentDate.getTime() + 86400000);\n};\n\nexport default getNextDate;\n","const getPrevDate = (currentDate: Date): Date => {\n  return new Date(currentDate.getTime() - 86400000);\n};\n\nexport default getPrevDate;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport type { RootState } from '../store/store';\r\n\r\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\nexport default useAppSelector;\r\n","import { RootState } from '../../store';\r\nimport { INote } from '../../../types/INote';\r\n\r\nconst selectNote = (state: RootState): INote => state.note;\r\nexport default selectNote;\r\n","import { IAuth } from '../../../types/IAuth';\r\nimport { RootState } from '../../store';\r\n\r\nexport const selectUserName = (state: RootState): string | undefined | null =>\r\n  state.user.userName;\r\nexport const selectAuth = (state: RootState): IAuth => state.user.auth;\r\nexport const selectToken = (state: RootState): string | undefined | null =>\r\n  state.user.auth.token;\r\nexport const selectExpiration = (state: RootState): string | undefined | null =>\r\n  state.user.auth.expiration;\r\n","// First attempt to get token from Redux store, otherwise get token from the\r\n// localStorage. Reading from Redux store is faster.\r\nimport { RootState } from '../store/store';\r\nimport { selectToken } from '../store/user/selectors';\r\n\r\nconst getToken = (store: RootState): string | null => {\r\n  let token = selectToken(store);\r\n  if (!token) token = localStorage.getItem('TOKEN');\r\n  return token;\r\n};\r\n\r\nexport default getToken;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { BASE_API_URL, entryMocked } from '../../../config';\r\nimport getToken from '../../../helpers/getToken';\r\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\r\nimport { RootState } from '../../store';\r\n\r\nconst deleteNote = createAsyncThunk<number, string>(\r\n  'notes/deleteNote',\r\n  async (fetchDate: string, thunkAPI) => {\r\n    if (entryMocked) {\r\n      return returnDataWithDelay(200, 'fast 3G');\r\n    }\r\n\r\n    const token = getToken(thunkAPI.getState() as RootState);\r\n\r\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) throw new Error(res.statusText);\r\n\r\n    return res.status;\r\n  },\r\n);\r\n\r\nexport default deleteNote;\r\n","export const dayDurationMs = 24 * 60 * 60 * 1000;\nexport const today = new Date().setUTCHours(0, 0, 0, 0);\n\nconst isYesterdayOrTomorrow = (initialDate: Date): boolean => {\n  return Math.abs(initialDate.getTime() - today) === dayDurationMs;\n};\n\nconst isToday = (initialDate: Date): boolean => {\n  return initialDate.getTime() === today;\n};\n\nconst isEditable = (initialDate: Date): boolean => {\n  return isYesterdayOrTomorrow(initialDate) || isToday(initialDate);\n};\n\nexport default isEditable;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { BASE_API_URL, entryMocked } from '../../../config';\r\nimport getToken from '../../../helpers/getToken';\r\nimport { dayDurationMs, today } from '../../../helpers/isEditable';\r\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\r\nimport mockShowNote from '../../../mocks/mockShowNote';\r\n\r\nimport { INote } from '../../../types/INote';\r\nimport { RootState } from '../../store';\r\n\r\nconst fetchNote = createAsyncThunk<INote, string>(\r\n  'notes/fetchNote',\r\n  async (fetchDate: string, thunkAPI) => {\r\n    if (entryMocked) {\r\n      if (\r\n        Math.abs(new Date(fetchDate).getTime() - today) <=\r\n        dayDurationMs * 2\r\n      ) {\r\n        return returnDataWithDelay(mockShowNote, 'fast 3G');\r\n      }\r\n\r\n      throw new Error('Mock write');\r\n    }\r\n\r\n    const token = getToken(thunkAPI.getState() as RootState);\r\n\r\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) throw new Error(res.statusText);\r\n\r\n    const data = await res.json();\r\n    return data as INote;\r\n  },\r\n);\r\n\r\nexport default fetchNote;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { BASE_API_URL, entryMocked } from '../../../config';\r\nimport getToken from '../../../helpers/getToken';\r\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\r\nimport { INote } from '../../../types/INote';\r\nimport { RootState } from '../../store';\r\n\r\nconst postNote = createAsyncThunk<INote, INote>(\r\n  'notes/postNote',\r\n  async (note: INote, thunkAPI) => {\r\n    if (entryMocked) {\r\n      return returnDataWithDelay(note, 'fast 3G');\r\n    }\r\n\r\n    const url = `${BASE_API_URL}/notes/`;\r\n\r\n    const token = getToken(thunkAPI.getState() as RootState);\r\n\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(note),\r\n    });\r\n\r\n    if (!res.ok) throw new Error(res.statusText);\r\n\r\n    const data = await res.json();\r\n    return data as INote;\r\n  },\r\n);\r\n\r\nexport default postNote;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { BASE_API_URL, entryMocked } from '../../../config';\r\nimport getToken from '../../../helpers/getToken';\r\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\r\nimport { INote } from '../../../types/INote';\r\nimport { RootState } from '../../store';\r\n\r\nconst putNote = createAsyncThunk<INote, INote>(\r\n  'notes/putNote',\r\n  async (note: INote, thunkAPI) => {\r\n    if (entryMocked) {\r\n      return returnDataWithDelay(note, 'fast 3G');\r\n    }\r\n\r\n    const url = `${BASE_API_URL}/notes/${note.initialDate}`;\r\n\r\n    const token = getToken(thunkAPI.getState() as RootState);\r\n\r\n    const res = await fetch(url, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        heading: note.heading,\r\n        content: note.content,\r\n        modificationDate: note.modificationDate,\r\n      }),\r\n    });\r\n\r\n    if (!res.ok) throw new Error(res.statusText);\r\n\r\n    const data = await res.json();\r\n    return data as INote;\r\n  },\r\n);\r\n\r\nexport default putNote;\r\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit';\r\nimport { toast } from 'react-toastify';\r\nimport { INote } from '../../types/INote';\r\nimport { NoteStatus } from '../../types/NoteStatus';\r\nimport deleteNote from './thunks/deleteNote';\r\nimport fetchNote from './thunks/fetchNote';\r\nimport postNote from './thunks/postNote';\r\nimport putNote from './thunks/putNote';\r\n\r\nexport const initialState: INote = {\r\n  heading: undefined,\r\n  content: undefined,\r\n  initialDate: undefined,\r\n  modificationDate: undefined,\r\n  status: 'write',\r\n};\r\n\r\nexport const noteSlice = createSlice({\r\n  name: 'note',\r\n  initialState,\r\n  reducers: {\r\n    setNote: (state, action: PayloadAction<INote>) => {\r\n      state = action.payload;\r\n    },\r\n    setStatus: (state, action: PayloadAction<NoteStatus>) => {\r\n      state.status = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchNote.rejected, (state) => {\r\n      state.status = 'write';\r\n    });\r\n\r\n    builder\r\n      .addCase(postNote.fulfilled, () => {\r\n        toast.success('Note was saved!');\r\n      })\r\n      .addCase(putNote.fulfilled, () => {\r\n        toast.success('Note was updated!');\r\n      })\r\n      .addCase(deleteNote.fulfilled, (state) => {\r\n        state.status = 'write';\r\n        toast.success('Note was deleted!');\r\n      });\r\n    builder.addMatcher(\r\n      isAnyOf(\r\n        fetchNote.pending,\r\n        postNote.pending,\r\n        putNote.pending,\r\n        deleteNote.pending,\r\n      ),\r\n      (state) => {\r\n        state.status = 'loading';\r\n      },\r\n    );\r\n\r\n    builder.addMatcher(\r\n      isAnyOf(fetchNote.fulfilled, postNote.fulfilled, putNote.fulfilled),\r\n      (state, action) => {\r\n        const { heading, content } = action.payload;\r\n        state.heading = heading;\r\n        state.content = content;\r\n        state.status = 'show';\r\n      },\r\n    );\r\n\r\n    builder.addMatcher(\r\n      isAnyOf(postNote.rejected, putNote.rejected, deleteNote.rejected),\r\n      (state, action) => {\r\n        toast.error(action.error.message);\r\n      },\r\n    );\r\n  },\r\n});\r\n\r\nexport const { setNote, setStatus } = noteSlice.actions;\r\n\r\nexport default noteSlice.reducer;\r\n","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className=\"loader\">Loading...</div>;\r\n};\r\n\r\nexport default Loader;\r\n","import classNames from 'classnames';\r\nimport React from 'react';\r\nimport { IButton } from '../../../types/IButton';\r\n\r\nconst RedButton = ({ value, className, onClick, isDisabled }: IButton) => {\r\n  return (\r\n    <input\r\n      type=\"submit\"\r\n      className={classNames('redButton', className)}\r\n      value={value}\r\n      disabled={isDisabled}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RedButton;\r\n","import React from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport RedButton from '../$buttons/RedButton/RedButton';\r\nimport useAppDispatch from '../../hooks/useAppDispatch';\r\nimport logo from '../../static/LargeLogo.png';\r\n\r\nimport './Header.css';\r\nimport { logout } from '../../store/user/slice';\r\nimport Container from '../Container/Container';\r\n\r\nconst Header = () => {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const logoutUser = () => {\r\n    dispatch(logout());\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Container className=\"flex justify-between align-center\">\r\n        <Link to=\"/\">\r\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n        </Link>\r\n        <RedButton\r\n          value=\"Log Out\"\r\n          className=\"logoutButton\"\r\n          onClick={logoutUser}\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Footer from '../Footer/Footer';\r\nimport Header from '../Header/Header';\r\n\r\nimport './PageTemplate.css';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst PageTemplate = ({ children, className }: Props) => {\r\n  return (\r\n    <section className=\"page\">\r\n      <Header />\r\n      <main className={classNames('page__content', className)}>{children}</main>\r\n      <Footer />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","import classNames from 'classnames';\r\nimport React from 'react';\r\nimport { IButton } from '../../../types/IButton';\r\n\r\nconst SecondaryButton = ({\r\n  value,\r\n  className,\r\n  onClick,\r\n  isDisabled,\r\n}: IButton) => {\r\n  return (\r\n    <input\r\n      type=\"submit\"\r\n      className={classNames('secondaryButton', className)}\r\n      value={value}\r\n      disabled={isDisabled}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SecondaryButton;\r\n","import React from 'react';\r\n\r\nimport './ShowNote.css';\r\nimport { useParams } from 'react-router-dom';\r\nimport RedButton from '../../$buttons/RedButton/RedButton';\r\nimport SecondaryButton from '../../$buttons/SecondaryButton/SecondaryButton';\r\nimport isEditable from '../../../helpers/isEditable';\r\nimport useAppDispatch from '../../../hooks/useAppDispatch';\r\nimport { setStatus } from '../../../store/note/slice';\r\nimport deleteNote from '../../../store/note/thunks/deleteNote';\r\nimport { INote } from '../../../types/INote';\r\n\r\ninterface Props {\r\n  note: INote;\r\n}\r\n\r\nconst ShowNote = ({ note }: Props) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { heading, content } = note;\r\n  const { date } = useParams();\r\n  const dateObj = new Date(date as string);\r\n  const canEdit = isEditable(dateObj);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"showNote\">\r\n        <h1 className=\"showHeading\">{heading}</h1>\r\n        <hr className=\"headingContentLine\" />\r\n        <p className=\"showContent\">{content}</p>\r\n      </div>\r\n      <div className=\"showContentControlButtons\">\r\n        {canEdit && (\r\n          <SecondaryButton\r\n            value=\"Edit\"\r\n            className=\"editButton\"\r\n            onClick={() => dispatch(setStatus('update'))}\r\n          />\r\n        )}\r\n        <RedButton\r\n          value=\"Delete\"\r\n          className=\"deleteButton\"\r\n          onClick={() => {\r\n            dispatch(deleteNote(date as string));\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowNote;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useParams } from 'react-router-dom';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\n\r\nimport './WriteNote.css';\r\nimport PrimaryButton from '../../$buttons/PrimaryButton/PrimaryButton';\r\nimport dateToString from '../../../helpers/dateToString';\r\n\r\nimport useAppDispatch from '../../../hooks/useAppDispatch';\r\nimport { INote } from '../../../types/INote';\r\nimport postNote from '../../../store/note/thunks/postNote';\r\nimport putNote from '../../../store/note/thunks/putNote';\r\n\r\ninterface IProps {\r\n  note: INote;\r\n}\r\n\r\nconst WriteNote = ({ note }: IProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const { register, handleSubmit } = useForm();\r\n  const { date } = useParams();\r\n\r\n  const { heading, content, status } = note;\r\n\r\n  const submitNote = (_note: INote) => {\r\n    _note.initialDate = date;\r\n\r\n    if (status === 'write') {\r\n      dispatch(postNote(_note));\r\n    } else if (status === 'update') {\r\n      _note.modificationDate = dateToString(new Date());\r\n      dispatch(putNote(_note));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(submitNote)} className=\"noteForm\">\r\n      <input\r\n        {...register('heading', { required: true })}\r\n        className=\"writeHeading inputField\"\r\n        placeholder=\"Title\"\r\n        defaultValue={heading}\r\n        maxLength={100}\r\n      />\r\n      <TextareaAutosize\r\n        {...register('content', { required: true })}\r\n        className=\"writeContent inputField\"\r\n        placeholder=\"Write your note...\"\r\n        defaultValue={content}\r\n      />\r\n      <PrimaryButton value=\"Save\" className=\"saveButton\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default WriteNote;\r\n","import React, { useLayoutEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport './Note.css';\nimport dateToString from '../../../helpers/dateToString';\nimport getNextDate from '../../../helpers/getNextDate';\nimport getPrevDate from '../../../helpers/getPrevDate';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport selectNote from '../../../store/note/selectors';\nimport { initialState } from '../../../store/note/slice';\nimport fetchNote from '../../../store/note/thunks/fetchNote';\nimport Container from '../../Container/Container';\nimport Loader from '../../Loader/Loader';\nimport PageTemplate from '../../PageTemplate/PageTemplate';\nimport ShowNote from '../ShowNote/ShowNote';\nimport WriteNote from '../WriteNote/WriteNote';\n\nconst Note = () => {\n  const dispatch = useAppDispatch();\n  const note = useAppSelector(selectNote);\n  const { date } = useParams();\n\n  useLayoutEffect(() => {\n    dispatch(fetchNote(date as string));\n  }, [dispatch, date]);\n\n  const navigate = useNavigate();\n\n  const navigateToPrev = (currentDate: string) => {\n    const prevDate = getPrevDate(new Date(currentDate));\n    const path = `/note/${dateToString(prevDate)}`;\n    navigate(path);\n  };\n\n  const navigateToNext = (currentDate: string) => {\n    const nextDate = getNextDate(new Date(currentDate));\n    const path = `/note/${dateToString(nextDate)}`;\n    navigate(path);\n  };\n\n  return (\n    <PageTemplate>\n      <Container>\n        <button\n          type=\"button\"\n          onClick={() => navigateToPrev(date as string)}\n          className=\"arrowDiv leftArrowDiv\"\n        >\n          <span className=\"arrow \">←</span>\n        </button>\n        {note.status === 'loading' && <Loader />}\n        {note.status === 'show' && <ShowNote note={note} />}\n        {note.status === 'write' && <WriteNote note={initialState} />}\n        {note.status === 'update' && <WriteNote note={note} />}\n        <button\n          type=\"button\"\n          onClick={() => navigateToNext(date as string)}\n          className=\"arrowDiv rightArrowDiv\"\n        >\n          <span className=\"arrow\">→</span>\n        </button>\n      </Container>\n    </PageTemplate>\n  );\n};\n\nexport default Note;\n","const isValidToken = (expiration: string): boolean => {\r\n  const expirationDate = new Date(expiration).getTime();\r\n  const currentDate = Date.now();\r\n  return currentDate < expirationDate;\r\n};\r\n\r\nexport default isValidToken;\r\n","import getToken from '../../../helpers/getToken';\r\nimport { RootState } from '../../store';\r\n\r\nconst selectIsAuth = (store: RootState): boolean => {\r\n  return Boolean(getToken(store));\r\n};\r\n\r\nexport default selectIsAuth;\r\n","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './NotesCalendar.css';\r\nimport dateToString from '../../helpers/dateToString';\r\nimport Container from '../Container/Container';\r\nimport PageTemplate from '../PageTemplate/PageTemplate';\r\n\r\nconst NotesCalendar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const redirectToNote = (date: Date) => {\r\n    const path = `/note/${dateToString(date)}`;\r\n    navigate(path);\r\n  };\r\n\r\n  return (\r\n    <PageTemplate>\r\n      <Container>\r\n        <Calendar className=\"calendar\" onClickDay={redirectToNote} />\r\n      </Container>\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default NotesCalendar;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n  Routes,\r\n  Route,\r\n  useLocation,\r\n  useNavigate,\r\n  Navigate,\r\n} from 'react-router-dom';\r\nimport LoginPage from '../$auth/LoginPage/LoginPage';\r\nimport RegistrationPage from '../$auth/RegistrationPage/RegistrationPage';\r\nimport Note from '../$note/Note/Note';\r\nimport isValidToken from '../../helpers/isValidToken';\r\nimport useAppDispatch from '../../hooks/useAppDispatch';\r\nimport useAppSelector from '../../hooks/useAppSelector';\r\nimport { selectExpiration } from '../../store/user/selectors';\r\nimport selectIsAuth from '../../store/user/selectors/selectIsAuth';\r\nimport { logout } from '../../store/user/slice';\r\nimport NotesCalendar from '../NotesCalendar/NotesCalendar';\r\n\r\nconst App = () => {\r\n  const isAuth = useAppSelector(selectIsAuth);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n  const expiration = useAppSelector(selectExpiration);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (typeof expiration === 'string' && !isValidToken(expiration as string)) {\r\n      dispatch(logout());\r\n      navigate('/');\r\n    }\r\n  }, [location, dispatch, expiration, navigate]);\r\n\r\n  if (!isAuth) {\r\n    return (\r\n      <Routes>\r\n        <Route path=\"/\" element={<LoginPage />} />\r\n        <Route path=\"/registration\" element={<RegistrationPage />} />\r\n        <Route path=\"/note/:date\" element={<Navigate replace to=\"/\" />} />\r\n      </Routes>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<NotesCalendar />} />\r\n      <Route path=\"/note/:date\" element={<Note />} />\r\n      <Route path=\"/registration\" element={<Navigate replace to=\"/\" />} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport isValidToken from '../helpers/isValidToken';\r\nimport userReducer, { logout } from './user/slice';\r\nimport noteReducer from './note/slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    note: noteReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() => {\r\n  const username = store.getState().user.userName;\r\n  const { token, expiration } = store.getState().user.auth;\r\n  if (typeof token === 'string' && isValidToken(expiration as string)) {\r\n    localStorage.setItem('USERNAME', username as string);\r\n    localStorage.setItem('TOKEN', token as string);\r\n    localStorage.setItem('EXPIRATION', expiration as string);\r\n  } else if (token) {\r\n    store.dispatch(logout());\r\n  }\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the store load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web store is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different store. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport './index.css';\r\nimport './styles/colors.css';\r\nimport './styles/PrimaryButton.css';\r\nimport './styles/SecondaryButton.css';\r\nimport './styles/RedButton.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <ToastContainer className=\"toast\" autoClose={4000} limit={3} />\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your store to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}